// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;


import {Ownable} from "@openzeppelin/contracts/access/Ownable.sol";


interface ICardCollectionNV {
function mintTo(address to, uint256 id, uint256 amount) external;
}


/// @title VendingMachine (Non‚ÄëVRF, TEST)
/// @notice One free pull per FID per *2 minutes* (test mode). Uses on-chain pseudo‚Äërandomness. Users pay their own gas.
/// @dev For MAINNET, change CLAIM_INTERVAL back to 24 hours and (optionally) remove adminResetClaim.
contract VendingMachine is Ownable {
struct ClaimInfo { uint64 lastClaimAt; }


ICardCollectionNV public immutable cards;


// ---- Daily gate (TEST interval) ----
// üîÅ TESTING ONLY: 2-minute cooldown so you can test quickly on Sepolia.
// ‚úÖ MAINNET: set this to 24 hours before deploying.
uint64 public constant CLAIM_INTERVAL = 2 minutes; // <-- change to 24 hours for production


mapping(uint256 => ClaimInfo) public claims;



// ---- Series & rarity ----
uint16[5] public rarityBps = [7000, 2200, 600, 180, 20]; // C,U,R,E,L out of 10_000
uint8 public constant RARITY_COUNT = 5;
uint8 public season = 1;
uint8 public setId = 1;


// Optional entropy salt that owner can rotate to reduce manipulation
bytes32 public entropySalt;


event Claim(address indexed user, uint256 indexed fid, uint256 cardId, uint8 rarity);


constructor(address _cardCollection, address initialOwner) Ownable(initialOwner) {
cards = ICardCollectionNV(_cardCollection);
entropySalt = keccak256(abi.encodePacked(block.timestamp, _cardCollection, initialOwner));
}


// --- Admin tweaks ---
function setRarity(uint16 c, uint16 u, uint16 r, uint16 e, uint16 l) external onlyOwner { rarityBps = [c,u,r,e,l]; }
function setSeries(uint8 _season, uint8 _set) external onlyOwner { season = _season; setId = _set; }
function rotateEntropy(bytes32 newSalt) external onlyOwner { entropySalt = newSalt; }


/// @notice TEST helper to fast-forward a user for reclaims. DO NOT ship to mainnet.
function adminResetClaim(uint256 fid) external onlyOwner { delete claims[fid]; }


// --- Claim ---
function claimDaily(uint256 fid) external returns (uint256 cardId) {
ClaimInfo memory info = claims[fid];
require(info.lastClaimAt + CLAIM_INTERVAL <= block.timestamp, "Already claimed");
claims[fid].lastClaimAt = uint64(block.timestamp);


uint256 rand = uint256(keccak256(
abi.encodePacked(block.prevrandao, block.timestamp, msg.sender, fid, entropySalt)
}
