// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;


import {IERC1155} from "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";


contract TradingEscrow is ReentrancyGuard {
struct Item { uint256 id; uint256 amount; }
struct Offer {
address maker;
address token; // ERC-1155 address
Item[] giving;
address taker; // address(0) = anyone
Item[] wanting;
bool active;
}


uint256 public nextOfferId;
mapping(uint256 => Offer) public offers;


event OfferCreated(uint256 indexed id, address indexed maker, address indexed token);
event OfferCancelled(uint256 indexed id);
event OfferAccepted(uint256 indexed id, address indexed taker);


function createOffer(address token, Item[] calldata giving, Item[] calldata wanting, address taker) external returns (uint256 id) {
id = nextOfferId++;
Offer storage o = offers[id];
o.maker = msg.sender; o.token = token; o.taker = taker; o.active = true;
for (uint i=0;i<giving.length;i++) { o.giving.push(giving[i]); }
for (uint i=0;i<wanting.length;i++) { o.wanting.push(wanting[i]); }
emit OfferCreated(id, msg.sender, token);
}


function cancelOffer(uint256 id) external {
Offer storage o = offers[id];
require(o.active && o.maker == msg.sender, "bad");
}
